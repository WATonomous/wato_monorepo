radar packet = point cloud
radar detection = point field


sensor_msgs::msg::PointCloud2 RadarRvizProcessor::convert_packet_to_pointcloud(packet){

    sensor_msgs::msg::PointCloud2 pc
    sensor_msgs::msg::PointField pf

    // Declaring all constant parameters

    set pc.header = packet.header
    set pc.height = 1
    set pc.width = 0
    set pc.is_bigendian = false
    set pc.point_step = 16
    set pc.row_step = point_step * #num_points_in_pc (depends on packet)
    set pc.is_dense = true

    set pf.datatype = float32 (for x, y and z)
    set pf.count = 1 (one point = one field)

    // X coordinate (4 bytes)
    set pf.name = "x"
    set pf.offset = 0
    pc.fields->push_back(pf)

    // y coordinate (4 bytes)
    set pf.name = "y"
    set pf.offset = 4
    pc.fields->push_back(pf)

    // z coordinate (4 bytes)
    set pf.name = "z"
    set pf.offset = 8
    pc.fields->push_back(pf)

    // intensity (4 bytes)
    set pf.name = "intensity"
    set pf.offset = 12
    pc.fields->push_back(pf)

    // Packet passed in
    int * tmp_ptr;
    for (int i = 0; i < packet.detectons.size(); i++)
    {
        radar_msgs::msg::RadarDetection detection = packet.detections[i];

        // X coordinate
        tmp_ptr = &detection.pos_x; // to 4 bytes?
        for (int a = 0; a < 4; a++)
        {
            pc.data[a]->push_back(tmp_ptr[a]);
        }

        // Y coordinate - same as X

        // z coordinate - same as X

        // intensity - same as x - there are additional intensity settings (from monorepo)

        pf.width++; // new point
    }
     set pc.row_step = point_step * pf.width;

     return pc;

}