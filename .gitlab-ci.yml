stages:
  - build-image
  - lint

default:
  retry:
    max: 2
    when:
      - runner_system_failure

# Global Variables
variables:
  DOCKER_TLS_CERTDIR: ""
  GIT_SSL_NO_VERIFY: "1"

# Build an invidiual docker image 
# ENV VARIABLES:
#    - SERVICE_NAME: Name of the service in docker-compose.yaml. 
#    - TARGETS (OPTIONAL): 
#         List of targets to build. Optional. 
#         if provided, Images should be tagged as  $CI_REGISTRY_IMAGE/$IMAGE_NAME:$TARGET_STAGE-$CI_COMMIT_BRANCH
#         Else, Images should be tagged as  $CI_REGISTRY_IMAGE/$IMAGE_NAME:$CI_COMMIT_BRANCH

.template: &build_template
  image: docker/compose:1.28.0-rc2
  stage: build-image
  tags:
    - dind
  services:
    - docker:stable-dind
  only:
    - develop
    - merge_requests
  before_script:
    - apk add bash
    - docker info
    - docker-compose version
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - rm -f /.dockerenv
    - bash .gitlab/ci/build_image.sh

# --------------- Software Images ----------------
build:object_tracking:
  <<: *build_template
  variables:
    SERVICE_NAME: object_tracking
    TARGETS: repo debug

build:perception:
  <<: *build_template
  variables:
    SERVICE_NAME: perception
    TARGETS: repo debug

build:pp_env_model:
  <<: *build_template
  variables:
    SERVICE_NAME: pp_env_model
    TARGETS: repo debug

#build:pp_global_mapping:
#  <<: *build_template
#  variables:
#    SERVICE_NAME: pp_global_mapping
#    TARGETS: repo debug

build:pp_local_planning:
  <<: *build_template
  variables:
    SERVICE_NAME: pp_local_planning
    TARGETS: repo debug

build:pp_occupancy:
  <<: *build_template
  variables:
    SERVICE_NAME: pp_occupancy
    TARGETS: repo debug

build:pp_ego_localization:
  <<: *build_template
  variables:
    SERVICE_NAME: pp_ego_localization
    TARGETS: repo debug

build:hd_maps_processing:
  <<: *build_template
  variables:
    SERVICE_NAME: hd_maps_processing
    TARGETS: repo debug

build:gui_tools:
  <<: *build_template
  variables:
    SERVICE_NAME: gui_tools
    TARGETS: repo debug

# --------------- ROS Drivers ----------------
build:camera_driver:
  <<: *build_template
  variables:
    SERVICE_NAME: camera_driver

build:lidar_driver:
  <<: *build_template
  variables:
    SERVICE_NAME: lidar_driver

#build:radar_driver:
#  <<: *build_template
#  variables:
#    SERVICE_NAME: radar_driver

build:bluelight_driver:
  <<: *build_template
  variables:
    SERVICE_NAME: bluelight_driver

build:gnss_imu_driver:
  <<: *build_template
  variables:
    SERVICE_NAME: gnss_imu_driver

build:can_interface:
  <<: *build_template
  variables:
    SERVICE_NAME: can_interface

# --------------- CARLA Images ----------------

build:carla_ros_bridge:
  <<: *build_template
  variables:
    SERVICE_NAME: carla_ros_bridge
    TARGETS: repo debug

build:carla_server:
  <<: *build_template
  variables:
    SERVICE_NAME: carla_server

# -------------- Linting ---------------
lint:clang-format:
  image: git.uwaterloo.ca:5050/watonomous/wato_monorepo/lint:latest
  stage: lint
  tags:
    - dind
  only:
    - merge_requests
  script:
    - git fetch origin develop
    - files=$(git diff --name-only -G. origin/develop... -- "*.cpp" "*.hpp" "*.c" "*.h")
    - echo $files
    - if [ -z "$files" ]; then exit; fi
    - RED="\e[0;31m"; GREEN="\e[0;32m"; NC="\e[0m"
    - ( ! ( clang-format --style=file --dry-run $files 2>&1 | tee /dev/stderr | grep warning > /dev/null ) ) || ( echo -e "${RED}Source code formatting issue(s) detected, please be advised to run ${GREEN}format_files.sh${NC}" && exit 1 )
