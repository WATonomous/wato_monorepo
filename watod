#!/usr/bin/env bash
# Copyright (c) 2025-present WATonomous. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Copyright (c) 2025‑present WATonomous.
# SPDX‑License‑Identifier: Apache‑2.0
set -euo pipefail

programname="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
MONO_DIR="$(cd -- "$(dirname -- "$(realpath "$0")")" && pwd)"
MODULES_DIR="$MONO_DIR/modules"

# Always arrays → safe to expand with "${arr[@]}"
declare -a MODULES=()
declare -a COMPOSE_CMD=()

usage() {
  cat <<EOF
Usage: $programname [OPTIONS]... [COMMAND]...

Executes 'docker compose COMMAND' in the monorepo with the correct
compose files and environment variables.

Options
  -v, --verbose               Print env setup output
  -t, --terminal SERVICE      Run 'docker compose up -d' (if needed) and open
                              a bash shell in the SERVICE container
  -h, --help                  Show this help and exit

Examples
  watod up                    # docker compose up
  watod ps --services         # docker compose ps --services
  watod --all build           # docker compose build for all modules
  watod -t perception         # open a shell in the 'perception' service

More info: https://docs.docker.com/compose/reference/overview/
EOF
}

run_compose() {
  cd "$MONO_DIR"

  # Build the list of -f <file> arguments once
  if [[ -z ${MODULES_BUILT:-} ]]; then
    MODULES_BUILT=1
    MODULES=()

    # shellcheck source=/dev/null
    source "$MODULES_DIR/.env"    # must define $ACTIVE_MODULES

    # Ensure ACTIVE_MODULES is an array
    if [[ ! ${ACTIVE_MODULES@a} =~ a ]]; then
      read -ra ACTIVE_MODULES <<<"$ACTIVE_MODULES"
    fi

    for m in "${ACTIVE_MODULES[@]}"; do
      MODULES+=( -f "$MODULES_DIR/docker-compose.${m}.yaml" )
    done
  fi

  echo "Running: docker compose ${MODULES[*]} ${COMPOSE_CMD[*]}"
  DOCKER_BUILDKIT=${DOCKER_BUILDKIT:-1} \
    docker compose "${MODULES[@]}" "${COMPOSE_CMD[@]}"
}

# ─────────────────────────── Argument parsing ────────────────────────────

[[ $# -eq 0 ]] && usage && exit 0

while [[ $# -gt 0 ]]; do
  case $1 in
    -v|--verbose)
      VERBOSE=1
      shift
      ;;
    -t|--terminal)
      START_TERMINAL=1
      shift
      SERVICE_NAME=${1:-}
      [[ -z $SERVICE_NAME ]] && { echo "Missing service name after -t"; usage; }
      shift
      ;;
    -h|--help|help)
      usage; exit 0 ;;
    *)  # first non‑option → rest is docker‑compose cmd
      break ;;
  esac
done

# The remaining CLI words are the compose sub‑command and its flags
COMPOSE_CMD=( "$@" )

# ─────────────────────────── Environment setup ───────────────────────────

# Local overrides
[[ -f "$MONO_DIR/watod-config.local.sh" ]] && source "$MONO_DIR/watod-config.local.sh"
[[ -f "$MONO_DIR/watod-config.sh"       ]] && source "$MONO_DIR/watod-config.sh"

# Mode of operation (deploy vs develop overrides)
MODE_OF_OPERATION=${MODE_OF_OPERATION:-deploy}
if [[ $MODE_OF_OPERATION == develop ]]; then
  MODULES_DIR="$MONO_DIR/modules/dev_overrides"
fi

# Generate .env via helper script
if [[ -n ${VERBOSE:-} ]]; then
  ( cd "$MONO_DIR" && source ./watod_scripts/watod-setup-env.sh )
else
  ( cd "$MONO_DIR" && source ./watod_scripts/watod-setup-env.sh ) &>/dev/null
fi

# ─────────────────────────── Execute compose ─────────────────────────────

if [[ ${#COMPOSE_CMD[@]} -gt 0 ]]; then
  # If opening a terminal via `-t`, ensure containers are up in detached mode
  if [[ -n ${START_TERMINAL:-} && "${COMPOSE_CMD[*]}" =~ \bup\b && ! "${COMPOSE_CMD[*]}" =~ -d ]]; then
    COMPOSE_CMD+=( -d )
  fi
  run_compose
fi

# Open interactive shell if requested
if [[ -n ${START_TERMINAL:-} ]]; then
  echo "Starting bash shell in service '$SERVICE_NAME'..."
  run_compose exec "$SERVICE_NAME" /bin/bash
fi
