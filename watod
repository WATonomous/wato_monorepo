#!/bin/bash
set -e

programname="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
MONO_DIR="$(dirname "$(realpath "$0")")"
MODULES_DIR="$MONO_DIR/modules"
ANSIBLE_TMP_DIR=/tmp/ansible-tmp-$USER

function usage {
    echo "Usage: $programname [OPTIONS]... [COMMAND]..."
    echo "Executes docker compose COMMAND in the the monorepo with appropriate environment variables."
    echo "  launch_autonomous               launch the can_interface for autonomous mode"
    echo "  -dev --devel                    configures containers for development (allows you to edit inside a container)"
    echo "  -v --verbose                    verbose mode. Currently, prints .env variables"                     
    echo "  -lp --local-ports               displays ports exposed by applications and shows the"
    echo "                                  ssh local port forwarding commands for each VNC Server found"
    echo "                                  if a docker compose command is specified, it will be run in the background."
    echo "  -t --terminal [service_name]    open a bash terminal into the desired service (eg: perception)."
    echo ""
    echo "Examples:" 
    echo "  watod up                       start containers (docker compose up)"
    echo "  watod down                     stop and remove containers (docker compose down)"
    echo "  watod ps [--services]          list containers in the current project and show their current status (docker compose ps)"
    echo "  watod --all pull               pull all new containers from the GitLab container registry (docker compose pull)"
    echo "  watod --all build              build all new containers using Dockerfiles in docker/ (docker compose build)"
    echo "  watod -t perception            open a bash terminal into the perception container."
    echo ""
    echo " More Info on Docker Compose: https://docs.docker.com/compose/reference/overview/"
    exit 0
}

function run_compose {
    cd $MONO_DIR
    if [ ! -z "$(source $MODULES_DIR/.env && echo $ACTIVE_MODULES)" ] && [ -z "$MODULES" ]; then 
        MODULES="$(source $MODULES_DIR/.env && printf -- " -f $MODULES_DIR/docker-compose.%s.yaml" ${ACTIVE_MODULES[@]})"
    fi
    echo "Running docker compose ${MODULES[@]} $@"

    DOCKER_BUILDKIT=${DOCKER_BUILDKIT:-1} docker compose ${MODULES[@]} "$@"
}

# in case you need help
if [ "$1" == 'help' ]; then
    usage
fi
# in case you have nothing to say
if [ $# == 0 ]; then
    usage
fi

# run options
COMPOSE_CMD=""
while [[ $# -gt 0 ]] ; do
    key="$1"
    case $key in
      -dev|--devel)
        DEVEL=1
        shift
        ;;
      -v|--verbose)
        VERBOSE=1
        shift # past argument
        ;;
      -lp|--local-ports)
        PRINT_LOCAL_PORTS=1
        shift
        ;;
      -t|--terminal)
        START_TERMINAL=1
        shift
        SERVICE_NAME=$1
        if [ -z "$SERVICE_NAME" ]; then
            echo "Expected watod -t SERVICE_NAME"
        usage
        fi
        shift
        ;;
      -h|--help) # in case you got this far, but still need help :)
        usage
        ;;
      *) # unknown option
        break
        ;;
    esac
done

if [[ $# -gt 0 ]]; then
	COMPOSE_CMD="${COMPOSE_CMD} $@"
fi

if [ ! -z $DEVEL ]; then
    echo "DEVELOPER MODE ACTIVATED: Source files have been mounted within /home/bolty when you enter the container"
    MODULES_DIR="$MONO_DIR/modules/dev_overrides"
    export MODULES_DIR_EXP="$MODULES_DIR"
fi

# generate .env file from watod_scripts/watod-setup-env.sh
if [ ! -z $VERBOSE ]; then # if we want to see all verbose coming from setting up env
    cd $MONO_DIR && bash watod_scripts/watod-setup-env.sh
else
    cd $MONO_DIR && bash watod_scripts/watod-setup-env.sh &> /dev/null
fi

if [ ! -z $PRINT_LOCAL_PORTS ]; then
    # get list of services to traverse
    SERVICE_LIST="$(run_compose ps --services | sort)"

    # fixes hostnames for VMs so that by default $HOSTNAME is the first element
    # in the array, which often is the domain name that can be accessed
    # externally
    read -ra HOSTNAME <<< $(hostname -A)
    echo "========================================================================="
    echo "Ports exposed by running containers:"
    echo "========================================================================="
    LOCAL_FORWARD_ALL=""

    PORTS_STRING=""
    for SERVICE in $SERVICE_LIST; do
        ENV_VARS="$(run_compose exec "$SERVICE" env || true)"
        VNC_PORT=$(echo "$ENV_VARS" | grep ^VNC_PORT= | cut -d '=' -f2)
        VNC_PORT=${VNC_PORT:0:5} # Strip unncessary characters

        if [ ! -z $VNC_PORT ]; then
            echo "$SERVICE service exposes a VNC Server at $HOSTNAME:$VNC_PORT"
            
            LOCAL_FORWARD="-L ${VNC_PORT}:localhost:${VNC_PORT}"
            LOCAL_FORWARD_ALL="${LOCAL_FORWARD_ALL} $LOCAL_FORWARD"
            PORTS_STRING="${PORTS_STRING},${VNC_PORT}:${SERVICE}_VNC"
            echo "	To forward it locally, run"
            echo "		ssh$LOCAL_FORWARD $USER@$HOSTNAME"
            echo "	on your local machine attach to VNC at localhost:${VNC_PORT}"
            echo
        fi
    done
    
    echo "========================================================================="
    echo "To forward all ports locally:"
    echo "ssh $LOCAL_FORWARD_ALL $USER@$HOSTNAME"
    echo "========================================================================="
fi

if [ ! -z "$COMPOSE_CMD" ]; then
    ADDITIONAL_ARGS=""
    # If we are starting a terminal, run docker compose up with the -d argument
    if [ ! -z "$START_TERMINAL" ] && [[ ! " ${COMPOSE_CMD[@]} " =~ " -d " ]] && [[ " ${COMPOSE_CMD[@]} " =~ " up " ]]; then
        ADDITIONAL_ARGS="-d"
    fi
    
    run_compose ${COMPOSE_CMD[@]} ${ADDITIONAL_ARGS}
fi

if [ ! -z "$START_TERMINAL" ]; then
    echo "Starting bash shell in service $SERVICE_NAME":
    run_compose exec $SERVICE_NAME /bin/bash
fi
